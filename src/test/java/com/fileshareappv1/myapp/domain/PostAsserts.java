package com.fileshareappv1.myapp.domain;

import static com.fileshareappv1.myapp.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PostAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPostAllPropertiesEquals(Post expected, Post actual) {
        assertPostAutoGeneratedPropertiesEquals(expected, actual);
        assertPostAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPostAllUpdatablePropertiesEquals(Post expected, Post actual) {
        assertPostUpdatableFieldsEquals(expected, actual);
        assertPostUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPostAutoGeneratedPropertiesEquals(Post expected, Post actual) {
        assertThat(actual)
            .as("Verify Post auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPostUpdatableFieldsEquals(Post expected, Post actual) {
        assertThat(actual)
            .as("Verify Post relevant properties")
            .satisfies(a -> assertThat(a.getContent()).as("check content").isEqualTo(expected.getContent()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getLocationName()).as("check locationName").isEqualTo(expected.getLocationName()))
            .satisfies(a ->
                assertThat(a.getLocationLat())
                    .as("check locationLat")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getLocationLat())
            )
            .satisfies(a ->
                assertThat(a.getLocationLong())
                    .as("check locationLong")
                    .usingComparator(bigDecimalCompareTo)
                    .isEqualTo(expected.getLocationLong())
            )
            .satisfies(a -> assertThat(a.getPrivacy()).as("check privacy").isEqualTo(expected.getPrivacy()))
            .satisfies(a -> assertThat(a.getScheduledAt()).as("check scheduledAt").isEqualTo(expected.getScheduledAt()))
            .satisfies(a -> assertThat(a.getViewCount()).as("check viewCount").isEqualTo(expected.getViewCount()))
            .satisfies(a -> assertThat(a.getCommentCount()).as("check commentCount").isEqualTo(expected.getCommentCount()))
            .satisfies(a -> assertThat(a.getShareCount()).as("check shareCount").isEqualTo(expected.getShareCount()))
            .satisfies(a -> assertThat(a.getReactionCount()).as("check reactionCount").isEqualTo(expected.getReactionCount()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPostUpdatableRelationshipsEquals(Post expected, Post actual) {
        assertThat(actual)
            .as("Verify Post relationships")
            .satisfies(a -> assertThat(a.getTags()).as("check tags").isEqualTo(expected.getTags()));
    }
}
